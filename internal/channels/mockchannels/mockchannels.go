// Code generated by MockGen. DO NOT EDIT.
// Source: channels.go

// Package mockchannels is a generated GoMock package.
package mockchannels

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messages "github.com/jaimeteb/chatto/internal/channels/message"
)

// MockChannel is a mock of Channel interface.
type MockChannel struct {
	ctrl     *gomock.Controller
	recorder *MockChannelMockRecorder
}

// MockChannelMockRecorder is the mock recorder for MockChannel.
type MockChannelMockRecorder struct {
	mock *MockChannel
}

// NewMockChannel creates a new mock instance.
func NewMockChannel(ctrl *gomock.Controller) *MockChannel {
	mock := &MockChannel{ctrl: ctrl}
	mock.recorder = &MockChannelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannel) EXPECT() *MockChannelMockRecorder {
	return m.recorder
}

// ReceiveMessage mocks base method.
func (m *MockChannel) MessageRequest(body []byte) (*messages.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageRequest", body)
	ret0, _ := ret[0].(*messages.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReceiveMessage indicates an expected call of ReceiveMessage.
func (mr *MockChannelMockRecorder) ReceiveMessage(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageRequest", reflect.TypeOf((*MockChannel)(nil).MessageRequest), body)
}

// ReceiveMessages mocks base method.
func (m *MockChannel) MessageRequestQueue(receiveChan chan messages.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MessageRequestQueue", receiveChan)
}

// ReceiveMessages indicates an expected call of ReceiveMessages.
func (mr *MockChannelMockRecorder) ReceiveMessages(receiveChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageRequestQueue", reflect.TypeOf((*MockChannel)(nil).MessageRequestQueue), receiveChan)
}

// SendMessage mocks base method.
func (m *MockChannel) MessageResponse(response *messages.Response) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageResponse", response)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockChannelMockRecorder) SendMessage(response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageResponse", reflect.TypeOf((*MockChannel)(nil).MessageResponse), response)
}

// String mocks base method.
func (m *MockChannel) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockChannelMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockChannel)(nil).String))
}

// ValidateCallback mocks base method.
func (m *MockChannel) ValidateCallback(r *http.Request) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCallback", r)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateCallback indicates an expected call of ValidateCallback.
func (mr *MockChannelMockRecorder) ValidateCallback(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCallback", reflect.TypeOf((*MockChannel)(nil).ValidateCallback), r)
}
